@model SmartPulseTask.Web.Models.DashboardViewModel
@{
    ViewData["Title"] = "Dashboard";
}

<div class="row">
    <div class="col-12">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1 class="h3 mb-0">
                <i class="fas fa-tachometer-alt text-primary me-2"></i>
                EPİAŞ Transaction Analysis Dashboard
            </h1>
            <div id="tokenStatus" class="badge bg-success">
                <i class="fas fa-check-circle me-1"></i>Token Aktif
            </div>
        </div>
    </div>
</div>

@if (Model.CurrentToken != null)
{
    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-info">
                <div class="card-header bg-info text-white">
                    <h5 class="mb-0">
                        <i class="fas fa-key me-2"></i>TGT Token Bilgileri
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3">
                            <strong>Token:</strong><br>
                            <code class="text-break">@Model.CurrentToken.FormattedValue</code>
                        </div>
                        <div class="col-md-3">
                            <strong>Oluşturma:</strong><br>
                            @Model.CurrentToken.CreatedAt.ToString("dd.MM.yyyy HH:mm:ss")
                        </div>
                        <div class="col-md-3">
                            <strong>Geçerlilik:</strong><br>
                            @Model.CurrentToken.ExpiresAt.ToString("dd.MM.yyyy HH:mm:ss")
                        </div>
                        <div class="col-md-3">
                            <strong>Kalan Süre:</strong><br>
                            <span id="timeRemaining" class="@(Model.CurrentToken.IsExpired ? "text-danger" : "text-success")">
                                @(Model.CurrentToken.IsExpired ? "Süresi Dolmuş" : Model.CurrentToken.TimeRemaining.ToString(@"hh\:mm\:ss"))
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<!-- Transaction Analysis Form -->
<div class="row mb-4">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="fas fa-search me-2"></i>İşlem Analizi
                </h5>
            </div>
            <div class="card-body">
                <form id="analysisForm">
                    @Html.AntiForgeryToken()
                    <div class="row">
                        <div class="col-md-4">
                            <label for="startDate" class="form-label">Başlangıç Tarihi</label>
                            <input type="datetime-local" id="startDate" name="startDate" class="form-control"
                                   value="@DateTime.Today.ToString("yyyy-MM-ddTHH:mm")" required>
                        </div>
                        <div class="col-md-4">
                            <label for="endDate" class="form-label">Bitiş Tarihi</label>
                            <input type="datetime-local" id="endDate" name="endDate" class="form-control"
                                   value="@DateTime.Today.AddDays(1).ToString("yyyy-MM-ddTHH:mm")" required>
                        </div>
                        <div class="col-md-4 d-flex align-items-end">
                            <button type="submit" id="analyzeBtn" class="btn btn-primary w-100">
                                <i class="fas fa-chart-bar me-2"></i>Analiz Et
                            </button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div id="loadingIndicator" class="row mb-4" style="display: none;">
    <div class="col-12">
        <div class="card">
            <div class="card-body text-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Yükleniyor...</span>
                </div>
                <p class="mt-3 mb-0">İşlemler analiz ediliyor, lütfen bekleyiniz...</p>
            </div>
        </div>
    </div>
</div>

<div id="summaryCards" class="row mb-4" style="display: none;">
    <div class="col-md-2">
        <div class="card bg-primary text-white">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h6 class="card-title">Toplam İşlem</h6>
                        <h4 id="totalTransactions">-</h4>
                    </div>
                    <div class="align-self-center">
                        <i class="fas fa-exchange-alt fa-2x"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-2">
        <div class="card bg-success text-white">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h6 class="card-title">Toplam Hacim</h6>
                        <h4 id="totalVolume">-</h4>
                        <small>MWh</small>
                    </div>
                    <div class="align-self-center">
                        <i class="fas fa-battery-full fa-2x"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-2">
        <div class="card bg-info text-white">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h6 class="card-title">Toplam Değer</h6>
                        <h4 id="totalValue">-</h4>
                        <small>Milyon TL</small>
                    </div>
                    <div class="align-self-center">
                        <i class="fas fa-lira-sign fa-2x"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-2">
        <div class="card bg-warning text-white">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h6 class="card-title">Ort. Fiyat</h6>
                        <h4 id="avgPrice">-</h4>
                        <small>TL/MWh</small>
                    </div>
                    <div class="align-self-center">
                        <i class="fas fa-chart-line fa-2x"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-2">
        <div class="card bg-danger text-white">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h6 class="card-title">Min Fiyat</h6>
                        <h4 id="minPrice">-</h4>
                        <small>TL/MWh</small>
                    </div>
                    <div class="align-self-center">
                        <i class="fas fa-arrow-down fa-2x"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-2">
        <div class="card bg-secondary text-white">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h6 class="card-title">Max Fiyat</h6>
                        <h4 id="maxPrice">-</h4>
                        <small>TL/MWh</small>
                    </div>
                    <div class="align-self-center">
                        <i class="fas fa-arrow-up fa-2x"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="chartsContainer" class="row mb-4" style="display: none;">
    <div class="col-md-6 mb-4">
        <div class="card">
            <div class="card-header">
                <h6 class="mb-0">
                    <i class="fas fa-clock me-2"></i>Saatlik Hacim ve Ortalama Fiyat
                </h6>
            </div>
            <div class="card-body">
                <canvas id="hourlyChart" height="300"></canvas>
            </div>
        </div>
    </div>

    <div class="col-md-6 mb-4">
        <div class="card">
            <div class="card-header">
                <h6 class="mb-0">
                    <i class="fas fa-pie-chart me-2"></i>Contract Dağılımı (Değer Bazlı)
                </h6>
            </div>
            <div class="card-body">
                <canvas id="contractChart" height="300"></canvas>
            </div>
        </div>
    </div>
    <div class="col-md-6 mb-4">
        <div class="card">
            <div class="card-header">
                <h6 class="mb-0">
                    <i class="fas fa-line-chart me-2"></i>Fiyat Trendi (İlk 100 İşlem)
                </h6>
            </div>
            <div class="card-body">
                <canvas id="priceChart" height="300"></canvas>
            </div>
        </div>
    </div>

    <div class="col-md-6 mb-4">
        <div class="card">
            <div class="card-header">
                <h6 class="mb-0">
                    <i class="fas fa-area-chart me-2"></i>Hacim Trendi (İlk 100 İşlem)
                </h6>
            </div>
            <div class="card-body">
                <canvas id="volumeChart" height="300"></canvas>
            </div>
        </div>
    </div>
</div>

<div id="resultsContainer" class="row" style="display: none;">
    <div class="col-12">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">
                    <i class="fas fa-table me-2"></i>Detaylı Analiz Tablosu
                </h5>
                <div>
                    <button id="exportBtn" class="btn btn-success btn-sm">
                        <i class="fas fa-download me-1"></i>Excel'e Aktar
                    </button>
                </div>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table id="resultsTable" class="table table-striped table-hover mb-0">
                        <thead class="table-dark">
                            <tr>
                                <th>Tarih</th>
                                <th>Kontrat Adı</th>
                                <th>Toplam İşlem Tutarı</th>
                                <th>Toplam İşlem Miktarı</th>
                                <th>Ağırlıklı Ortalama Fiyat</th>
                                <th>İşlem Sayısı</th>
                            </tr>
                        </thead>
                        <tbody id="resultsTableBody">
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
<div id="errorAlert" class="alert alert-danger" role="alert" style="display: none;">
    <i class="fas fa-exclamation-triangle me-2"></i>
    <span id="errorMessage"></span>
</div>


@section Scripts {
    <script>
        let hourlyChart, contractChart, priceChart, volumeChart;

        $(document).ready(function() {
            updateTokenStatus();
            setInterval(updateTokenStatus, 30000); 

            $('#analysisForm').on('submit', function(e) {
                e.preventDefault();
                analyzeTransactions();
            });

            $('#exportBtn').on('click', function() {
                exportToExcel();
            });
        });

        function updateTokenStatus() {
            $.get('/Auth/TokenInfo')
                .done(function(response) {
                    if (response.success) {
                        const token = response.data;
                        const statusElement = $('#tokenStatus');
                        const timeElement = $('#timeRemaining');

                        if (token.isExpired) {
                            statusElement.removeClass('bg-success').addClass('bg-danger')
                                .html('<i class="fas fa-times-circle me-1"></i>Token Süresi Dolmuş');
                            timeElement.removeClass('text-success').addClass('text-danger')
                                .text('Süresi Dolmuş');
                        } else {
                            statusElement.removeClass('bg-danger').addClass('bg-success')
                                .html('<i class="fas fa-check-circle me-1"></i>Token Aktif');

                            const hours = Math.floor(token.timeRemaining.totalSeconds / 3600);
                            const minutes = Math.floor((token.timeRemaining.totalSeconds % 3600) / 60);
                            const seconds = Math.floor(token.timeRemaining.totalSeconds % 60);

                            timeElement.removeClass('text-danger').addClass('text-success')
                                .text(`${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`);
                        }
                    }
                })
                .fail(function() {
                    $('#tokenStatus').removeClass('bg-success').addClass('bg-warning')
                        .html('<i class="fas fa-question-circle me-1"></i>Token Durumu Bilinmiyor');
                });
        }

        function analyzeTransactions() {
            const startDate = $('#startDate').val();
            const endDate = $('#endDate').val();

            if (!startDate || !endDate) {
                showError('Lütfen başlangıç ve bitiş tarihlerini giriniz.');
                return;
            }

            if (new Date(startDate) >= new Date(endDate)) {
                showError('Başlangıç tarihi bitiş tarihinden önce olmalıdır.');
                return;
            }

            hideError();
            $('#loadingIndicator').show();
            $('#summaryCards').hide();
            $('#chartsContainer').hide();
            $('#resultsContainer').hide();
            $('#analyzeBtn').prop('disabled', true);

            const data = {
                startDate: startDate,
                endDate: endDate
            };

            $.ajax({
                url: '/Dashboard/GetChartData',
                method: 'POST',
                data: data,
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                }
            })
            .done(function(chartResponse) {
                if (chartResponse.success) {
                    updateSummaryCards(chartResponse.summary);
                    createCharts(chartResponse);
                    $('#summaryCards').show();
                    $('#chartsContainer').show();
                }
            })
            .fail(function(xhr) {
                console.error('Chart data fetch failed:', xhr);
            });
            $.ajax({
                url: '/Dashboard/AnalyzeTransactions',
                method: 'POST',
                data: data,
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                }
            })
            .done(function(response) {
                if (response.success) {
                    displayResults(response.data);
                } else {
                    showError(response.errorMessage || 'Analiz sırasında bir hata oluştu.');
                }
            })
            .fail(function(xhr) {
                let errorMessage = 'Sunucu hatası oluştu.';
                if (xhr.responseJSON && xhr.responseJSON.errorMessage) {
                    errorMessage = xhr.responseJSON.errorMessage;
                }
                showError(errorMessage);
            })
            .always(function() {
                $('#loadingIndicator').hide();
                $('#analyzeBtn').prop('disabled', false);
            });
        }

        function updateSummaryCards(summary) {
            $('#totalTransactions').text(summary.totalTransactions.toLocaleString('tr-TR'));
            $('#totalVolume').text(summary.totalVolume.toLocaleString('tr-TR'));
            $('#totalValue').text((summary.totalValue / 1000000).toFixed(1));
            $('#avgPrice').text(summary.avgPrice.toFixed(2));
            $('#minPrice').text(summary.minPrice.toFixed(2));
            $('#maxPrice').text(summary.maxPrice.toFixed(2));
        }
        function createCharts(data) {
            if (hourlyChart) hourlyChart.destroy();
            if (contractChart) contractChart.destroy();
            if (priceChart) priceChart.destroy();
            if (volumeChart) volumeChart.destroy();

            const hourlyCtx = document.getElementById('hourlyChart').getContext('2d');
            hourlyChart = new Chart(hourlyCtx, {
                type: 'bar',
                data: {
                    labels: data.hourlyAnalysis.map(h => h.hour),
                    datasets: [{
                        label: 'Toplam Hacim (MWh)',
                        data: data.hourlyAnalysis.map(h => h.totalVolume),
                        backgroundColor: 'rgba(54, 162, 235, 0.7)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 1,
                        yAxisID: 'y'
                    }, {
                        label: 'Ortalama Fiyat (TL/MWh)',
                        data: data.hourlyAnalysis.map(h => h.avgPrice),
                        type: 'line',
                        backgroundColor: 'rgba(255, 99, 132, 0.7)',
                        borderColor: 'rgba(255, 99, 132, 1)',
                        borderWidth: 2,
                        yAxisID: 'y1'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            type: 'linear',
                            display: true,
                            position: 'left',
                        },
                        y1: {
                            type: 'linear',
                            display: true,
                            position: 'right',
                            grid: {
                                drawOnChartArea: false,
                            },
                        },
                    }
                }
            });

            const contractCtx = document.getElementById('contractChart').getContext('2d');
            const contractColors = [
                '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0',
                '#9966FF', '#FF9F40', '#C9CBCF', '#4BC0C0'
            ];

            contractChart = new Chart(contractCtx, {
                type: 'doughnut',
                data: {
                    labels: data.contractAnalysis.map(c => c.name),
                    datasets: [{
                        data: data.contractAnalysis.map(c => c.totalValue),
                        backgroundColor: contractColors,
                        borderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return context.label + ': ₺' + context.parsed.toLocaleString('tr-TR');
                                }
                            }
                        }
                    }
                }
            });

            const priceCtx = document.getElementById('priceChart').getContext('2d');
            priceChart = new Chart(priceCtx, {
                type: 'line',
                data: {
                    labels: data.priceTrend.map((p, index) => `İşlem ${index + 1}`),
                    datasets: [{
                        label: 'Fiyat (TL/MWh)',
                        data: data.priceTrend.map(p => p.price),
                        borderColor: 'rgba(75, 192, 192, 1)',
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        borderWidth: 2,
                        fill: false
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: false
                        }
                    }
                }
            });

            const volumeCtx = document.getElementById('volumeChart').getContext('2d');
            volumeChart = new Chart(volumeCtx, {
                type: 'line',
                data: {
                    labels: data.volumeAnalysis.map((v, index) => `İşlem ${index + 1}`),
                    datasets: [{
                        label: 'Hacim (MWh)',
                        data: data.volumeAnalysis.map(v => v.volume),
                        borderColor: 'rgba(153, 102, 255, 1)',
                        backgroundColor: 'rgba(153, 102, 255, 0.2)',
                        borderWidth: 2,
                        fill: true
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }

        function displayResults(results) {
            const tbody = $('#resultsTableBody');
            tbody.empty();

            if (results && results.length > 0) {
                results.forEach(function(result) {
                    const row = `
                        <tr>
                            <td>${formatDateTime(result.contractDateTime)}</td>
                            <td><code>${result.contractName}</code></td>
                            <td class="text-end">${formatCurrency(result.totalAmount)}</td>
                            <td class="text-end">${formatNumber(result.totalQuantity)}</td>
                            <td class="text-end">${formatCurrency(result.weightedAveragePrice)}</td>
                            <td class="text-center"><span class="badge bg-info">${result.transactionCount}</span></td>
                        </tr>
                    `;
                    tbody.append(row);
                });

                $('#resultsContainer').show();
            } else {
                showError('Belirtilen tarih aralığında işlem bulunamadı.');
            }
        }

        function formatDateTime(dateString) {
            const date = new Date(dateString);
            return date.toLocaleDateString('tr-TR') + ' ' + date.toLocaleTimeString('tr-TR', { hour: '2-digit', minute: '2-digit' });
        }

        function formatCurrency(amount) {
            return new Intl.NumberFormat('tr-TR', { style: 'currency', currency: 'TRY' }).format(amount);
        }

        function formatNumber(number) {
            return new Intl.NumberFormat('tr-TR', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(number);
        }

        function showError(message) {
            $('#errorMessage').text(message);
            $('#errorAlert').show();
        }

        function hideError() {
            $('#errorAlert').hide();
        }

        function exportToExcel() {
            const table = document.getElementById('resultsTable');
            let csvContent = '';

            const headers = Array.from(table.querySelectorAll('thead th')).map(th => th.textContent);
            csvContent += headers.join(',') + '\n';

            const rows = Array.from(table.querySelectorAll('tbody tr'));
            rows.forEach(row => {
                const cells = Array.from(row.querySelectorAll('td')).map(td => td.textContent.replace(/,/g, ';'));
                csvContent += cells.join(',') + '\n';
            });

            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            const url = URL.createObjectURL(blob);
            link.setAttribute('href', url);
            link.setAttribute('download', `epias_analiz_${new Date().toISOString().split('T')[0]}.csv`);
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
    </script>
}